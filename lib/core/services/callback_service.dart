import 'package:mybot/core/commands/help.dart';
import 'package:mybot/core/commands/put.dart';
import 'package:mybot/core/commands/stats.dart';
import 'package:mybot/core/commands/history.dart';
import 'package:mybot/core/constants/config.dart';
import 'package:mybot/core/constants/role.dart';
import 'package:mybot/core/constants/role_enum.dart';
import 'package:mybot/core/services/google_sheets_service.dart';
import 'package:televerse/telegram.dart';
import 'package:televerse/televerse.dart';

void callBackService(Bot bot, GoogleSheetsService sheetsService) {
  bot.onCallbackQuery((ctx) async {
    final data = ctx.callbackQuery?.data;
    final userId = ctx.callbackQuery?.from.id;

    if (data == null || userId == null) return;

    await ctx.api.answerCallbackQuery(ctx.callbackQuery!.id);

    // üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–¥–º–∏–Ω–∫—É
    if (data.startsWith("approve_") || data.startsWith("reject_")) {
      if (!isSuperAdmin(userId)) {
        await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
        return;
      }

      if (data.startsWith("approve_")) {
        final payload = data.replaceFirst("approve_", "");
        final parts = payload.split("_");

        if (parts.length < 2) {
          await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö.");
          return;
        }

        final userIdStr = parts[0];
        final requesterUsername = parts.sublist(1).join("_");

        await _approveUser(userIdStr, requesterUsername, ctx, sheetsService);
      } else if (data.startsWith("reject_")) {
        final payload = data.replaceFirst("reject_", "");
        final parts = payload.split("_");

        if (parts.length < 2) {
          await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö.");
          return;
        }

        final userIdStr = parts[0];
        final requesterUsername = parts.sublist(1).join("_");

        await ctx.reply(
          "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @$requesterUsername (id: $userIdStr) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        );
      }

      return;
    }

    if (data == RequestsData.put) {
      if (isAdmin(userId)) {
        await handlePut(ctx, sheetsService);
      } else {
        await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
      }
    } else if (data == RequestsData.stats) {
      if (isSuperAdmin(userId)) {
        await handleStats(ctx, sheetsService);
      } else {
        await ctx.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.");
      }
    } else if (data == RequestsData.help) {
      await handleHelp(ctx, sheetsService);
    } else if (data == RequestsData.getRole) {
      final userId = ctx.from?.id;
      final username = ctx.from?.username ?? '–ë–µ–∑ –∏–º–µ–Ω–∏';
      final superAdmins = getSuperAdmins();

      if (userId == null) return;

      if (isAdmin(userId)) {
        await ctx.reply("‚úÖ –í—ã —É–∂–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
        return;
      }

      for (final adminId in superAdmins) {
        await bot.api.sendMessage(
          ChatID(adminId),
          "üõéÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @$username (id: $userId) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
          replyMarkup: InlineKeyboardMarkup(
            inlineKeyboard: [
              [
                InlineKeyboardButton(
                  text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                  callbackData: "approve_${userId}_$username",
                ),
                InlineKeyboardButton(
                  text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                  callbackData: "reject_${userId}_$username",
                ),
              ],
            ],
          ),
        );
      }

      await ctx.reply(
        "üîî –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.",
      );
    } else if (data == RequestsData.history) {
      if (isSuperAdmin(userId)) {
        await handleHistory(ctx, sheetsService);
      } else {
        await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏.");
      }
    } else {
      await ctx.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
    }
  });
}

Future<void> _approveUser(
  String userIdStr,
  String requesterUsername,
  Context ctx,
  GoogleSheetsService sheetsService,
) async {
  final userId = int.tryParse(userIdStr);
  if (userId == null) {
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.");
    return;
  }

  await sheetsService.inputRoleAdmin(
    role: RoleEnum.admin.label,
    userName: requesterUsername,
    userId: userId,
  );

  await RoleClass.initialize(sheetsService);

  await ctx.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.");
  await ctx.api.sendMessage(
    ChatID(userId),
    "üéâ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
  );
}
