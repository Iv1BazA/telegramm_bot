import 'package:mybot/core/constants/role.dart';
import 'package:mybot/core/constants/states.dart';
import 'package:mybot/core/services/google_sheets_service.dart';
import 'package:televerse/telegram.dart';
import 'package:televerse/televerse.dart';

final sessions = <int, SessionState>{};

void putCommand(Bot bot, GoogleSheetsService sheetsService) {
  bot.command('put', (ctx) async {
    final id = ctx.id.id;

    if (!isAdmin(id)) {
      await ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.");
      return;
    }

    await handlePut(ctx, sheetsService);
  });

  bot.onText((ctx) async {
    final id = ctx.id.id;
    if (sessions.containsKey(id)) {
      await handlePutText(ctx, sheetsService);
    }
  });
}

// –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞
Future<void> handlePut(Context ctx, GoogleSheetsService sheetsService) async {
  final id = ctx.id.id;

  final sheets = await sheetsService.listSheets();
  final buttons = sheets.map((s) => KeyboardButton(text: s)).toList();

  sessions[id] = SessionState();

  await sheetsService.logSilently(
    userName: ctx.from?.username ?? ctx.from?.firstName ?? 'Unknown',
    role: getNameUserRole(id),
    action: ctx.message?.text ?? '',
  );

  await ctx.reply(
    "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç:",
    replyMarkup: ReplyKeyboardMarkup(keyboard: [buttons], resizeKeyboard: true),
  );
}

Future<void> handlePutText(
  Context ctx,
  GoogleSheetsService sheetsService,
) async {
  final id = ctx.id.id;
  final text = ctx.message?.text ?? '';
  final session = sessions[id];

  // ‚õîÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
  if (text == '‚ùå –û—Ç–º–µ–Ω–∞') {
    sessions.remove(id);
    await ctx.reply("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", replyMarkup: ReplyKeyboardRemove());
    return;
  }

  // ‚õîÔ∏è –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä
  if (session == null) return;

  await sheetsService.logSilently(
    userName: ctx.from?.username ?? ctx.from?.firstName ?? 'Unknown',
    role: getNameUserRole(id),
    action: text,
  );

  // üìÑ –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
  if (session.selectedSheet == null) {
    session.selectedSheet = text;
    session.fields = await sheetsService.getColumnNames(text);

    if (session.fields == null || session.fields!.isEmpty) {
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ª–∏—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.");
      sessions.remove(id);
      return;
    }

    await ctx.reply(
      "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: ${session.fields![0]}",
      replyMarkup: ReplyKeyboardMarkup(
        keyboard: [
          [KeyboardButton(text: '‚ùå –û—Ç–º–µ–Ω–∞')],
        ],
        resizeKeyboard: true,
      ),
    );
    return;
  }

  // ‚úçÔ∏è –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π
  final field = session.fields![session.currentFieldIndex];
  session.values[field] = text;
  session.currentFieldIndex++;

  // ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
  if (session.currentFieldIndex >= session.fields!.length) {
    await sheetsService.appendRow(
      session.selectedSheet!,
      session.fields!.map((f) => session.values[f] ?? '').toList(),
    );

    await ctx.reply("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ '${session.selectedSheet}'");

    await sheetsService.logSilently(
      userName: ctx.from?.username ?? ctx.from?.firstName ?? 'Unknown',
      role: getNameUserRole(id),
      action: "–î–æ–±–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç ${session.selectedSheet}",
    );

    sessions.remove(id);
  } else {
    final nextField = session.fields![session.currentFieldIndex];
    await ctx.reply(
      "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: $nextField",
      replyMarkup: ReplyKeyboardMarkup(
        keyboard: [
          [KeyboardButton(text: '‚ùå –û—Ç–º–µ–Ω–∞')],
        ],
        resizeKeyboard: true,
      ),
    );
  }
}
